import numpy as np
import matplotlib.pyplot as plt
from matplotlib.figure import Figure
from matplotlib.backends.backend_tkagg import (FigureCanvasTkAgg, 
NavigationToolbar2Tk)

#Tkinter for widgets and interactivity. Scipy for ode solving
import tkinter as tk

#This import stops automatically sets up the window so its reasonable
import ctypes 
ctypes.windll.shcore.SetProcessDpiAwareness(1) 

#Personal plotting preferences
plt.rcParams.update({"text.usetex": True, "font.family": "serif",
                     "font.serif": ["Computer Modern Serif"]})
plt.rc('axes', labelsize=14, titlesize=15)
plt.rcParams['xtick.labelsize'] = 12
plt.rcParams['ytick.labelsize'] = 12

window = tk.Tk()
window.title('GUI for Matter and Radiation')
window.geometry('750x500')
fig = Figure(figsize=(7.5, 5)) #750x500 pixels
fig.set_facecolor('white')

#Canvas is where figure is placed to window
canvas = FigureCanvasTkAgg(fig, window)
canvas.get_tk_widget().place(relheight=1,relwidth=1)
canvas.draw() #Show canvas (ie show figure)

#Show the navigation toolbar
NavigationToolbar2Tk(canvas, window)

#________________Plotting combined potential for two potentials___________

comb_pot_ax_dims = [.1,.2,.8,.675]
comb_pot_ax = fig.add_axes(comb_pot_ax_dims)

phi_range = np.linspace(-1,2,2000)

lam1_0 = 2
lam2_0 = -10

V0_1 = 1
V0_2 = 2
k = 1

def V(phi, k, lam, V0):
    return V0*np.exp(-lam*k*phi)

V1 = V(phi_range, k, lam1_0, V0_1)
V2 = V(phi_range, k, lam2_0, V0_2)

V_tot = V1 + V2

phi_m = np.log(abs((lam1_0*V0_1)/(lam2_0*V0_2))) / (k*(lam1_0-lam2_0))
V1_m = V(phi_m, k, lam1_0, V0_1)
V2_m = V(phi_m, k, lam2_0, V0_2)
V_tot_m = V1_m + V2_m

V1 /= V_tot_m
V2 /= V_tot_m
V_tot /= V_tot_m
V_tot_m /= V_tot_m
phi_range /= phi_m
phi_m /= phi_m

comb_pot_ax.plot([0,0],[-5,15],'k', linewidth=0.5)
comb_pot_ax.plot([-10,10],[0,0],'k', linewidth=0.5)
comb_pot_ax.plot([phi_m,phi_m],[-1,V_tot_m], 'k-.', linewidth=0.5)
comb_pot_ax.plot([-5,phi_m],[V_tot_m,V_tot_m], 'k-.', linewidth=0.5)
comb_pot_ax.plot(phi_range, V1, 'r--', label='$V_1(\phi)$')
comb_pot_ax.plot(phi_range, V2, 'g--',  label='$V_2(\phi)$')
comb_pot_ax.plot(phi_range, V_tot, 'b', label='$V_{T}(\phi)$')
comb_pot_ax.plot(phi_m, V_tot_m, 'k*')


comb_pot_ax.set(ylim=[-1/2,4], xlim=[-3,4], xticks=[0,1], xticklabels=['$0$','$\phi_m$'],
                yticks=[0,1], yticklabels=['$0$',r'$\rho_c$'])
comb_pot_ax.set_title(r'$0<V_{01}<V_{02}, \ \ \ \ \lambda_2<0<\lambda_1,\ \ \ \ \left|\frac{\lambda_1}{\lambda_2}\right|<1$', pad=10,fontsize=12)
comb_pot_ax.set_ylabel(ylabel='$V(\phi)$', rotation=0, y=1, fontsize=12)
comb_pot_ax.text(4, -4/5, r'$\phi$', fontsize=12) # acts as x label
comb_pot_ax.legend(loc='upper left', fontsize=12)

#comb_pot_ax.text(1.5, 3.5, r'$\phi_m=\frac{1}{\kappa(\lambda_1 - \lambda_2)}\ln\left| \frac{\lambda_1 V_{01}}{\lambda_2 V_{02}}\right|$', fontsize = 12)


#Run the code
window.mainloop()